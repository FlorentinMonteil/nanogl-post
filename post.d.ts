import Program from 'nanogl/program';
import Texture from 'nanogl/texture';
import Fbo from 'nanogl/fbo';
import GLArrayBuffer from 'nanogl/arraybuffer';
import { EffectDependency } from './effects/base-effect';
import { GLContext } from 'nanogl/types';
import BaseEffect from './effects/base-effect';
export default class Post {
    gl: GLContext;
    _effects: BaseEffect[];
    _flags: EffectDependency;
    _shaderInvalid: boolean;
    renderWidth: number;
    renderHeight: number;
    bufferWidth: number;
    bufferHeight: number;
    enabled: boolean;
    mipmap: boolean;
    float_texture_ext: OES_texture_float | null;
    halfFloat: OES_texture_half_float | null;
    float_texture_ext_l: OES_texture_half_float_linear | null;
    halfFloat_l: OES_texture_float_linear | null;
    color_buffer_float: any;
    hasDepthTexture: boolean;
    mainFbo: Fbo;
    mainColor: Texture;
    prg: Program;
    fsPlane: GLArrayBuffer;
    constructor(gl: GLContext, mipmap?: boolean);
    dispose(): void;
    _needDepth(): boolean;
    _needLinear(): boolean;
    genFbo(): Fbo;
    add(effect: BaseEffect): void;
    remove(effect: BaseEffect): void;
    resize(w: number, h: number): void;
    preRender(w: number, h: number): void;
    needDepthPass(): boolean;
    bindColor(): void;
    render(toFbo?: Fbo): void;
    fillScreen(prg: Program, fullframe?: boolean): void;
    buildProgram(): void;
}
